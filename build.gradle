import org.apache.commons.lang3.StringUtils

// 构建的时候需要执行一下代码, 这里可以填写依赖包
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    }
}

plugins {
    id 'java'
}


apply([plugin: MyPus])
apply plugin: MyPlugin

allprojects {
    // allprojects 表示所有的项目都能使用
    group 'com.shanjiancaofu'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 1.8
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}
// 修改默认策略
configurations.all {
    resolutionStrategy {
        // 修改gradle不处理版本冲突
        failOnVersionConflict()
    }
}


// 强制指定一个版本
/*configuration.all{
    resolutionStrategy{
        force 'org.slf4j:slf4j-api:1.7.24'
    }
}*/

// 这里的依赖 并不是公用的依赖
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile(group: "org.hibernate", name: "hibernate-core", version: "3.6.3.Final") {
        // 排除slf4j的依赖
        exclude group: "org.slf4j", module: "slf4j-api"
    }
}

task t1 {
    doFirst {
        println "执行 t2 之前, 执行 t1"
    }
    println "hello t1"

}


task t2(dependsOn: 't1') {
    // 任务构建的时候执行代码必须放在 doFirst 和doPost 里面才可以.
    // 其他的代码是在构建的时候就已经执行执行代码的

    // 比如说执行 t2, 那么会线配置项目的时候, 会 打印 hello t1, hello h2, t2 依赖与t1,
    // 那么会先执行 t1 的doFirst, 在执行 t2 的do first,last 的任务
    doFirst {
        println "t2 doFisrt"
    }
    println "hello t2"
    doLast({
        println "t2 doLast"
    })
}


task t3(dependsOn: t2) {

}


task t4 {
    doFirst {
        println("执行t4")
    }
}
// 外部设置依赖执行 task t3
t4.dependsOn("t3")

task("helloworld") {
    println "hello build"
    doLast({
        println "helloworld execute!!!"
    })
}

// 循环执行任务
4.times { val ->
    task "tk${val}" {
        doLast {
            println " 执行tk ${val}"
        }

    }
}
// 配置完成后执行的代码
afterEvaluate {
    println "end"
}

class MyPus implements Plugin<Project> {
    @Override
    void apply(Project target) {
        println "plugin execute end!!!"
    }
}
// 引入插件
//apply plugin: MyPus
if (
StringUtils.isEmpty()) {
    println "StringUitls isEmpty is null"
}

// 配置子项目公共的依赖
subprojects {
    group 'com.shanjiancaofu'
    version '1.0-SNAPSHOT'
    apply plugin: 'java'
    // 指定JDK版本
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    // 指定编码格式
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    ext {//依赖版本
        springBootVersion = "2.1.2.RELEASE"
        mysqlConnectorVersion = "8.0.13"
        mybatisStarterVersion = "1.3.2"
        fastjsonVersion = "1.2.54"
    }
    dependencies {
        // JSON
        compile("com.alibaba:fastjson:$fastjsonVersion")
        // Apache Commons
        compile("org.apache.commons:commons-lang3:3.8.1")
        testCompile("junit:junit:4.12")
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    }
    configurations {
        //移除spring boot 默认logger依赖
        all*.exclude module: 'spring-boot-starter-logging'
    }
}

